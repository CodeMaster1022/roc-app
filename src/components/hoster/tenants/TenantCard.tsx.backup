import { TenantApplication } from "@/types/tenant";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Calendar, MapPin, User, Briefcase, GraduationCap, Building } from "lucide-react";
import { format } from "date-fns";
import { useNavigate } from "react-router-dom";
import { useIsMobile } from "@/hooks/use-mobile";

interface TenantCardProps {
  application: TenantApplication;
  onViewDetails: () => void;
}

export const TenantCard = ({ application, onViewDetails }: TenantCardProps) => {
  const navigate = useNavigate();
  const isMobile = useIsMobile();

  const handleViewDetails = () => {
    if (isMobile) {
      navigate(`/inquilinos/${application.id}`);
    } else {
      onViewDetails();
    }
  };
  const getStatusBadge = () => {
    switch (application.status) {
      case 'pending':
        return <Badge variant="outline" className="bg-yellow-50 text-yellow-700 border-yellow-200">Pendiente</Badge>;
      case 'approved':
        return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Aprobada</Badge>;
      case 'rejected':
        return <Badge variant="outline" className="bg-red-50 text-red-700 border-red-200">Rechazada</Badge>;
      default:
        return null;
    }
  };

  const getTenantTypeIcon = () => {
    switch (application.tenantType) {
      case 'student':
        return <GraduationCap className="w-4 h-4" />;
      case 'professional':
        return <Briefcase className="w-4 h-4" />;
      case 'entrepreneur':
        return <Building className="w-4 h-4" />;
      default:
        return <User className="w-4 h-4" />;
    }
  };

  const getTenantTypeLabel = () => {
    switch (application.tenantType) {
      case 'student':
        return 'Estudiante';
      case 'professional':
        return 'Profesional';
      case 'entrepreneur':
        return 'Emprendedor';
      default:
        return '';
    }
  };

  return (
    <Card className="hover:shadow-md transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1">
            <div className="flex items-center gap-2">
              <h3 className="font-semibold text-lg">{application.applicantName}</h3>
              {getStatusBadge()}
            </div>
            <div className="flex items-center gap-4 text-sm text-gray-600">
              <div className="flex items-center gap-1">
                {getTenantTypeIcon()}
                <span>{getTenantTypeLabel()}</span>
              </div>
              <div className="flex items-center gap-1">
                <MapPin className="w-4 h-4" />
                <span>{application.propertyName}</span>
              </div>
            </div>
          </div>
          <Button variant="outline" size="sm" onClick={handleViewDetails}>
            Ver detalles
          </Button>
        </div>
      </CardHeader>
      
      <CardContent>
        <div className="flex justify-between items-center text-sm">
          <div>
            <span className="font-medium text-gray-900">Duración del contrato:</span>
            <p className="text-gray-600">{application.contractDuration}</p>
          </div>
          <div>
            <span className="font-medium text-gray-900">Fecha de ingreso:</span>
            <p className="text-gray-600 flex items-center gap-1">
              <Calendar className="w-3 h-3" />
              {format(application.moveInDate, "dd/MM/yyyy")}
            </p>
          </div>
        </div>
        
        <div className="mt-4 pt-3 border-t">
          <span className="text-xs text-gray-500">
            Aplicó el {format(application.appliedAt, "dd/MM/yyyy")}
          </span>
        </div>
      </CardContent>
    </Card>
  );
};